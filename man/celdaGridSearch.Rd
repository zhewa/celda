% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/celdaGridSearch.R
\name{celdaGridSearch}
\alias{celdaGridSearch}
\title{Run Celda in parallel with multiple parameters}
\usage{
celdaGridSearch(
  counts,
  model,
  paramsTest,
  paramsFixed = NULL,
  maxIter = 200,
  nchains = 3,
  cores = 1,
  bestOnly = TRUE,
  perplexity = TRUE,
  verbose = TRUE,
  logfilePrefix = "Celda"
)
}
\arguments{
\item{counts}{Integer matrix. Rows represent features and columns represent
cells.}

\item{model}{Celda model. Options available in `celda::availableModels`.}

\item{paramsTest}{List. A list denoting the combinations of parameters to
run in a celda model. For example, `list(K = seq(5, 10), L = seq(15, 20))`
will run all combinations of K from 5 to 10 and L from 15 to 20 in model
`celda_CG()`.}

\item{paramsFixed}{List. A list denoting additional parameters to use in
each celda model. Default NULL.}

\item{maxIter}{Integer. Maximum number of iterations of sampling to
perform. Default 200.}

\item{nchains}{Integer. Number of random cluster initializations. Default 3.}

\item{cores}{Integer. The number of cores to use for parallel estimation of
chains. Default 1.}

\item{bestOnly}{Logical. Whether to return only the chain with the highest
log likelihood per combination of parameters or return all chains. Default
TRUE.}

\item{perplexity}{Logical. Whether to calculate perplexity for each model.
If FALSE, then perplexity can be calculated later with
`resamplePerplexity()`. Default TRUE.}

\item{verbose}{Logical. Whether to print log messages during celda chain
execution. Default TRUE.}

\item{logfilePrefix}{Character. Prefix for log files from worker threads
and main process. Default "Celda".}
}
\value{
Object of class `celdaList`, which contains results for all model
 parameter combinations and summaries of the run parameters
}
\description{
Run Celda with different combinations of parameters and
 multiple chains in parallel. The variable `availableModels` contains the
 potential models that can be utilized. Different parameters to be tested
 should be stored in a list and passed to the argument `paramsTest`. Fixed
 parameters to be used in all models, such as `sampleLabel`, can be passed
 as a list to the argument `paramsFixed`. When `verbose = TRUE`, output
 from each chain will be sent to a log file but not be displayed in stdout.
}
\examples{
\donttest{
data(celdaCGSim)
#' ## Run various combinations of parameters with 'celdaGridSearch'
celdaCGGridSearchRes <- celdaGridSearch(celdaCGSim$counts,
    model = "celda_CG",
    paramsTest = list(K = seq(4, 6), L = seq(9, 11)),
    paramsFixed = list(sampleLabel = celdaCGSim$sampleLabel),
    bestOnly = TRUE,
    nchains = 1,
    cores = 2)
}
}
\seealso{
`celda_G()` for feature clustering, `celda_C()` for clustering of
 cells, and `celda_CG()` for simultaneous clustering of features and cells.
 `subsetCeldaList()` can subset the `celdaList` object. `selectBestModel()`
 can get the best model for each combination of parameters.
}
