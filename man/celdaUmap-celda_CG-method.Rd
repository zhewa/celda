% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/celda_CG.R, R/celda_CG_mm.R
\name{celdaUmap,celda_CG-method}
\alias{celdaUmap,celda_CG-method}
\title{umap for celda_CG}
\usage{
\S4method{celdaUmap}{celda_CG}(
  counts,
  celdaMod,
  maxCells = 25000,
  minClusterSize = 100,
  modules = NULL,
  seed = 12345,
  umapConfig = umap::umap.defaults
)

\S4method{celdaUmap}{celda_CG}(
  counts,
  celdaMod,
  maxCells = 25000,
  minClusterSize = 100,
  modules = NULL,
  seed = 12345,
  umapConfig = umap::umap.defaults
)
}
\arguments{
\item{counts}{Integer matrix. Rows represent features and columns represent
cells. This matrix should be the same as the one used to generate
`celdaMod`.}

\item{celdaMod}{Celda object of class `celda_CG`.}

\item{maxCells}{Integer. Maximum number of cells to plot. Cells will be
randomly subsampled if ncol(counts) > maxCells. Larger numbers of cells
requires more memory. Default 25000.}

\item{minClusterSize}{Integer. Do not subsample cell clusters below this
threshold. Default 100.}

\item{modules}{Integer vector. Determines which features modules to use for
tSNE. If NULL, all modules will be used. Default NULL.}

\item{seed}{Integer. Passed to \link[withr]{with_seed}. For reproducibility,
a default value of 12345 is used. If NULL, no calls to
\link[withr]{with_seed} are made.}

\item{umapConfig}{Object of class `umap.config`. Configures parameters for
umap. Default `umap::umap.defaults`.}
}
\value{
A two column matrix of umap coordinates

A two column matrix of umap coordinates
}
\description{
Embeds cells in two dimensions using umap based on a `celda_CG`
 model. umap is run on module probabilities to reduce the number of features
 instead of using PCA. Module probabilities square-root trasformed before
 applying tSNE.

Embeds cells in two dimensions using umap based on a `celda_CG`
 model. umap is run on module probabilities to reduce the number of features
 instead of using PCA. Module probabilities square-root trasformed before
 applying tSNE.
}
\examples{
data(celdaCGSim, celdaCGMod)
umapRes <- celdaUmap(celdaCGSim$counts, celdaCGMod)
data(celdaCGSim, celdaCGMod)
umapRes <- celdaUmap(celdaCGSim$counts, celdaCGMod)
}
\seealso{
`celda_CG()` for clustering features and cells and `celdaHeatmap()`
 for displaying expression.

`celda_CG()` for clustering features and cells and `celdaHeatmap()`
 for displaying expression.
}
